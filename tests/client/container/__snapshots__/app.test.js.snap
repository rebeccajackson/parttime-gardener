// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App container is the same snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    auth={
      Object {
        "isAuthenticated": false,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <React.Fragment>
        <div
          id="home"
        >
          <Connect(Nav) />
          <div
            className="home-page"
          >
            <Route
              component={[Function]}
              path="/login"
            />
            }
            <Route
              component={[Function]}
              path="/register"
            />
          </div>
        </div>
      </React.Fragment>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <div
          id="home"
        >
          <Connect(Nav) />
          <div
            className="home-page"
          >
            <Route
              component={[Function]}
              path="/login"
            />
            }
            <Route
              component={[Function]}
              path="/register"
            />
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(Nav) />,
            <div
              className="home-page"
            >
              <Route
                component={[Function]}
                path="/login"
              />
              }
              <Route
                component={[Function]}
                path="/register"
              />
            </div>,
          ],
          "id": "home",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <Route
                  component={[Function]}
                  path="/login"
                />,
                "}",
                <Route
                  component={[Function]}
                  path="/register"
                />,
              ],
              "className": "home-page",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/login",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "}",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/register",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": Symbol(react.fragment),
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <React.Fragment>
          <div
            id="home"
          >
            <Connect(Nav) />
            <div
              className="home-page"
            >
              <Route
                component={[Function]}
                path="/login"
              />
              }
              <Route
                component={[Function]}
                path="/register"
              />
            </div>
          </div>
        </React.Fragment>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <div
            id="home"
          >
            <Connect(Nav) />
            <div
              className="home-page"
            >
              <Route
                component={[Function]}
                path="/login"
              />
              }
              <Route
                component={[Function]}
                path="/register"
              />
            </div>
          </div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(Nav) />,
              <div
                className="home-page"
              >
                <Route
                  component={[Function]}
                  path="/login"
                />
                }
                <Route
                  component={[Function]}
                  path="/register"
                />
              </div>,
            ],
            "id": "home",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <Route
                    component={[Function]}
                    path="/login"
                  />,
                  "}",
                  <Route
                    component={[Function]}
                    path="/register"
                  />,
                ],
                "className": "home-page",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "path": "/login",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "}",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "path": "/register",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": Symbol(react.fragment),
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
